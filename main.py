import os
import sys
import logging
from typing import cast
from openai import AsyncOpenAI
import time
import asyncio

# –ò–º–ø–æ—Ä—Ç—ã Telegram
from telegram import Update, BotCommand, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from telegram.ext import (
    Application,
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CommandHandler,
    CallbackQueryHandler,
    filters
)

# –ò–º–ø–æ—Ä—Ç dotenv
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_DIR = 'logs'
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(os.path.join(LOG_DIR, 'bot.log')),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
WELCOME_MESSAGE = """üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ChatGPT Telegram Bot! üåü

–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –º–æ—â–∏ ChatGPT –ø—Ä—è–º–æ –≤ Telegram:

‚ú® –ù–∏–∫–∞–∫–æ–≥–æ VPN
‚ú® –ù–µ –Ω—É–∂–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ ChatGPT
‚ú® –í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ Telegram
‚ú® –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.
–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º! üöÄ"""

HELP_MESSAGE = """üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/menu - –û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/examples - –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤
/categories - –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º! üí¨"""

ABOUT_MESSAGE = """‚ÑπÔ∏è –û –±–æ—Ç–µ:

–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ChatGPT - —Å–∞–º—É—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é —è–∑—ã–∫–æ–≤—É—é –º–æ–¥–µ–ª—å –æ—Ç OpenAI.

üîë –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –î–æ—Å—Ç—É–ø –∫ ChatGPT –±–µ–∑ VPN
‚Ä¢ –ù–µ –Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ OpenAI
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç –≤ –≤–∞—à–µ–º –ª—é–±–∏–º–æ–º –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –∏ —Ç–æ—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

üõ° –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:
–ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
–ö–∞–∂–¥—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞

üöÄ –í–µ—Ä—Å–∏—è: 1.0"""

EXAMPLES_MESSAGE = """üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:

1Ô∏è‚É£ –û–±—â–∏–µ –∑–Ω–∞–Ω–∏—è:
‚Ä¢ "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫–≤–∞–Ω—Ç–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞?"
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–∏—á–∏–Ω–∞—Ö –ü–µ—Ä–≤–æ–π –º–∏—Ä–æ–≤–æ–π –≤–æ–π–Ω—ã"

2Ô∏è‚É£ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ:
‚Ä¢ "–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ Python?"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ –ø—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã garbage collection"

3Ô∏è‚É£ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞:
‚Ä¢ "–ü–æ–º–æ–≥–∏ —Ä–µ—à–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ"
‚Ä¢ "–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–µ–º—É –ü–∏—Ñ–∞–≥–æ—Ä–∞"

4Ô∏è‚É£ –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ:
‚Ä¢ "–ü—Ä–∏–¥—É–º–∞–π –∏—Å—Ç–æ—Ä–∏—é –æ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏"
‚Ä¢ "–°–æ—á–∏–Ω–∏ —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ –æ –≤–µ—Å–Ω–µ"

–ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π! üéØ"""

CATEGORIES_MESSAGE = """üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:

üéì –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏ –≥–µ–æ–≥—Ä–∞—Ñ–∏—è
‚Ä¢ –Ø–∑—ã–∫–∏ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞

üíª –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –Ω–∞—É–∫–∏
‚Ä¢ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç

üé® –¢–≤–æ—Ä—á–µ—Å—Ç–≤–æ
‚Ä¢ –ù–∞–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π
‚Ä¢ –°—Ç–∏—Ö–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑—ã

üíº –ë–∏–∑–Ω–µ—Å
‚Ä¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥
‚Ä¢ –ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö

üåç –î—Ä—É–≥–æ–µ
‚Ä¢ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è
‚Ä¢ –ö—É–ª–∏–Ω–∞—Ä–∏—è
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ

–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å! üéØ"""

SETTINGS_MESSAGE = """‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:

–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:
üìù –ú–æ–¥–µ–ª—å: GPT-3.5-turbo
üåê –Ø–∑—ã–∫: –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
‚ú® –ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è

‚ùóÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.
–í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –≤—ã —Å–º–æ–∂–µ—Ç–µ:
‚Ä¢ –í—ã–±–∏—Ä–∞—Ç—å —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤
‚Ä¢ –†–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏! üîÑ"""

def setup_environment() -> tuple[str, str]:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    bot_token = os.getenv('BOT_TOKEN')
    openai_token = os.getenv('OPENAI_API_KEY')
    
    if not bot_token:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    if not openai_token:
        logger.error("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        sys.exit(1)
    
    return bot_token, openai_token

async def get_chatgpt_response(client: AsyncOpenAI, message: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT."""
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        response = await asyncio.wait_for(
            client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."},
                    {"role": "user", "content": message}
                ],
                max_tokens=2048  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞
            ),
            timeout=30.0  # –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
        )
        
        content = response.choices[0].message.content
        if not content:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
        
        # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏
        if len(content) > 4000:  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ –≤ 4096
            parts = [content[i:i+4000] for i in range(0, len(content), 4000)]
            return parts[0] + "\n\n(–û—Ç–≤–µ—Ç –±—ã–ª —Å–æ–∫—Ä–∞—â–µ–Ω –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram)"
            
        return content
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–ø—Ä–æ—Å –∑–∞–Ω—è–ª —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ."
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ChatGPT: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

async def setup_commands(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."""
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("menu", "–û—Ç–∫—Ä—ã—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand("help", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("about", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"),
        BotCommand("examples", "–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤"),
        BotCommand("categories", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤"),
        BotCommand("settings", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"),
    ]
    await application.bot.set_my_commands(commands)

def get_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é."""
    keyboard = [
        [
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
            InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],
        [
            InlineKeyboardButton("üí° –ü—Ä–∏–º–µ—Ä—ã", callback_data="examples"),
            InlineKeyboardButton("üóÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="categories")
        ],
        [
            InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not update.message:
        return
    
    user_id = update.message.from_user.id if update.message.from_user else 'Unknown'
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await update.message.reply_text(WELCOME_MESSAGE)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    if not update.message:
        return
    await update.message.reply_text(HELP_MESSAGE)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /about."""
    if not update.message:
        return
    await update.message.reply_text(ABOUT_MESSAGE)

async def examples_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /examples."""
    if not update.message:
        return
    await update.message.reply_text(EXAMPLES_MESSAGE)

async def categories_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories."""
    if not update.message:
        return
    await update.message.reply_text(CATEGORIES_MESSAGE)

async def settings_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings."""
    if not update.message:
        return
    await update.message.reply_text(SETTINGS_MESSAGE)

async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu."""
    if not update.message:
        return
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_menu_keyboard()
    )

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    query = cast(CallbackQuery, update.callback_query)
    if not query or not query.message:
        return
    
    message = cast(Message, query.message)
    await query.answer()  # –£–±–∏—Ä–∞–µ–º —á–∞—Å–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–∏

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
    messages = {
        "about": ABOUT_MESSAGE,
        "help": HELP_MESSAGE,
        "examples": EXAMPLES_MESSAGE,
        "categories": CATEGORIES_MESSAGE,
        "settings": SETTINGS_MESSAGE
    }

    try:
        if query.data in messages:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
            keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]]
            await message.edit_text(
                messages[query.data],
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        elif query.data == "back_to_menu":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_menu_keyboard()
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /menu"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not update.message or not update.message.text:
        logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
        return

    user_message = update.message.text
    user_id = update.message.from_user.id if update.message.from_user else 'Unknown'
    username = update.message.from_user.username if update.message.from_user else 'Unknown'
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (@{username}): {user_message}")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await update.message.chat.send_chat_action("typing")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–∞
        client = context.bot_data.get('openai_client')
        if not client:
            logger.error("OpenAI client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        response = await get_chatgpt_response(client, user_message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (@{username})")
        
    except Exception as e:
        error_message = (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        await update.message.reply_text(error_message)
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id} (@{username}): {str(e)}", exc_info=True)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞."""
    retry_count = 0
    max_retries = 3
    
    while retry_count < max_retries:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            bot_token, openai_token = setup_environment()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
            openai_client = AsyncOpenAI(api_key=openai_token)
            
            # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            application = ApplicationBuilder().token(bot_token).post_init(setup_commands).build()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI –≤ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
            application.bot_data['openai_client'] = openai_client
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            application.add_handler(CommandHandler("start", start_command))
            application.add_handler(CommandHandler("help", help_command))
            application.add_handler(CommandHandler("about", about_command))
            application.add_handler(CommandHandler("examples", examples_command))
            application.add_handler(CommandHandler("categories", categories_command))
            application.add_handler(CommandHandler("settings", settings_command))
            application.add_handler(CommandHandler("menu", menu_command))
            application.add_handler(CallbackQueryHandler(button_click))
            application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            application.run_polling(drop_pending_updates=True)
            break
            
        except Exception as e:
            retry_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ (–ø–æ–ø—ã—Ç–∫–∞ {retry_count} –∏–∑ {max_retries}): {e}")
            if retry_count < max_retries:
                logger.info("–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
                time.sleep(10)
            else:
                logger.critical("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                sys.exit(1)

if __name__ == '__main__':
    main() 